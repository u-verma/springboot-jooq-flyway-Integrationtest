/*
 * This file is generated by jOOQ.
 */
package persistence.tables


import java.time.LocalDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import persistence.Public
import persistence.keys.PK_USER_PRINCIPAL
import persistence.tables.records.UserPrincipalRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserPrincipal(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserPrincipalRecord>?,
    aliased: Table<UserPrincipalRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UserPrincipalRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.user_principal</code>
         */
        val USER_PRINCIPAL = UserPrincipal()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserPrincipalRecord> = UserPrincipalRecord::class.java

    /**
     * The column <code>public.user_principal.id</code>.
     */
    val ID: TableField<UserPrincipalRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.user_principal.first_name</code>.
     */
    val FIRST_NAME: TableField<UserPrincipalRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>public.user_principal.last_name</code>.
     */
    val LAST_NAME: TableField<UserPrincipalRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>public.user_principal.email_id</code>.
     */
    val EMAIL_ID: TableField<UserPrincipalRecord, String?> = createField(DSL.name("email_id"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>public.user_principal.phone_no</code>.
     */
    val PHONE_NO: TableField<UserPrincipalRecord, String?> = createField(DSL.name("phone_no"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>public.user_principal.created_by</code>.
     */
    val CREATED_BY: TableField<UserPrincipalRecord, LocalDateTime?> = createField(DSL.name("created_by"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<UserPrincipalRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserPrincipalRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.user_principal</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.user_principal</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.user_principal</code> table reference
     */
    constructor(): this(DSL.name("user_principal"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UserPrincipalRecord>): this(Internal.createPathAlias(child, key), child, key, USER_PRINCIPAL, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<UserPrincipalRecord> = PK_USER_PRINCIPAL
    override fun getKeys(): List<UniqueKey<UserPrincipalRecord>> = listOf(PK_USER_PRINCIPAL)
    override fun `as`(alias: String): UserPrincipal = UserPrincipal(DSL.name(alias), this)
    override fun `as`(alias: Name): UserPrincipal = UserPrincipal(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserPrincipal = UserPrincipal(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserPrincipal = UserPrincipal(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<UUID?, String?, String?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row6<UUID?, String?, String?, String?, String?, LocalDateTime?>
}
