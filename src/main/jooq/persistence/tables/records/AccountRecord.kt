/*
 * This file is generated by jOOQ.
 */
package persistence.tables.records


import java.time.LocalDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import persistence.tables.Account


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountRecord() : UpdatableRecordImpl<AccountRecord>(Account.ACCOUNT), Record3<UUID?, String?, LocalDateTime?> {

    var id: UUID?
        set(value) = set(0, value)
        get() = get(0) as UUID?

    var accountId: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var createdBy: LocalDateTime?
        set(value) = set(2, value)
        get() = get(2) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<UUID?, String?, LocalDateTime?> = super.fieldsRow() as Row3<UUID?, String?, LocalDateTime?>
    override fun valuesRow(): Row3<UUID?, String?, LocalDateTime?> = super.valuesRow() as Row3<UUID?, String?, LocalDateTime?>
    override fun field1(): Field<UUID?> = Account.ACCOUNT.ID
    override fun field2(): Field<String?> = Account.ACCOUNT.ACCOUNT_ID
    override fun field3(): Field<LocalDateTime?> = Account.ACCOUNT.CREATED_BY
    override fun component1(): UUID? = id
    override fun component2(): String? = accountId
    override fun component3(): LocalDateTime? = createdBy
    override fun value1(): UUID? = id
    override fun value2(): String? = accountId
    override fun value3(): LocalDateTime? = createdBy

    override fun value1(value: UUID?): AccountRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): AccountRecord {
        this.accountId = value
        return this
    }

    override fun value3(value: LocalDateTime?): AccountRecord {
        this.createdBy = value
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: LocalDateTime?): AccountRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    constructor(id: UUID? = null, accountId: String? = null, createdBy: LocalDateTime? = null): this() {
        this.id = id
        this.accountId = accountId
        this.createdBy = createdBy
    }
}
