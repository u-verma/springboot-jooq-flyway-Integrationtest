/*
 * This file is generated by jOOQ.
 */
package persistence.tables.records


import java.time.LocalDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl

import persistence.tables.UserPrincipal


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserPrincipalRecord() : UpdatableRecordImpl<UserPrincipalRecord>(UserPrincipal.USER_PRINCIPAL), Record6<UUID?, String?, String?, String?, String?, LocalDateTime?> {

    var id: UUID?
        set(value) = set(0, value)
        get() = get(0) as UUID?

    var firstName: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var lastName: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var emailId: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var phoneNo: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    var createdBy: LocalDateTime?
        set(value) = set(5, value)
        get() = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<UUID?, String?, String?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row6<UUID?, String?, String?, String?, String?, LocalDateTime?>
    override fun valuesRow(): Row6<UUID?, String?, String?, String?, String?, LocalDateTime?> = super.valuesRow() as Row6<UUID?, String?, String?, String?, String?, LocalDateTime?>
    override fun field1(): Field<UUID?> = UserPrincipal.USER_PRINCIPAL.ID
    override fun field2(): Field<String?> = UserPrincipal.USER_PRINCIPAL.FIRST_NAME
    override fun field3(): Field<String?> = UserPrincipal.USER_PRINCIPAL.LAST_NAME
    override fun field4(): Field<String?> = UserPrincipal.USER_PRINCIPAL.EMAIL_ID
    override fun field5(): Field<String?> = UserPrincipal.USER_PRINCIPAL.PHONE_NO
    override fun field6(): Field<LocalDateTime?> = UserPrincipal.USER_PRINCIPAL.CREATED_BY
    override fun component1(): UUID? = id
    override fun component2(): String? = firstName
    override fun component3(): String? = lastName
    override fun component4(): String? = emailId
    override fun component5(): String? = phoneNo
    override fun component6(): LocalDateTime? = createdBy
    override fun value1(): UUID? = id
    override fun value2(): String? = firstName
    override fun value3(): String? = lastName
    override fun value4(): String? = emailId
    override fun value5(): String? = phoneNo
    override fun value6(): LocalDateTime? = createdBy

    override fun value1(value: UUID?): UserPrincipalRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): UserPrincipalRecord {
        this.firstName = value
        return this
    }

    override fun value3(value: String?): UserPrincipalRecord {
        this.lastName = value
        return this
    }

    override fun value4(value: String?): UserPrincipalRecord {
        this.emailId = value
        return this
    }

    override fun value5(value: String?): UserPrincipalRecord {
        this.phoneNo = value
        return this
    }

    override fun value6(value: LocalDateTime?): UserPrincipalRecord {
        this.createdBy = value
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: String?, value4: String?, value5: String?, value6: LocalDateTime?): UserPrincipalRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised UserPrincipalRecord
     */
    constructor(id: UUID? = null, firstName: String? = null, lastName: String? = null, emailId: String? = null, phoneNo: String? = null, createdBy: LocalDateTime? = null): this() {
        this.id = id
        this.firstName = firstName
        this.lastName = lastName
        this.emailId = emailId
        this.phoneNo = phoneNo
        this.createdBy = createdBy
    }
}
